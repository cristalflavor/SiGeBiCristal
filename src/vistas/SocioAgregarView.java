package vistas;

import datos.SocioData;
import entidades.Foto;
import entidades.Socio;
import java.io.File;
import java.io.FileInputStream;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.lang.reflect.Field;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.LinearGradientPaint;
import java.awt.MultipleGradientPaint;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.Timer;

public class SocioAgregarView extends javax.swing.JInternalFrame {

    private static SocioAgregarView sar;
    SocioData metodoDeSocio = new SocioData();
    private Foto foto;
    private final Image resetear = new ImageIcon(getClass().getResource("/vistas/imagenes/resetear.png")).getImage();
    private final Image cancelar = new ImageIcon(getClass().getResource("/vistas/imagenes/cancelar.png")).getImage();
    private final Image agregar = new ImageIcon(getClass().getResource("/vistas/imagenes/agregarSocio.png")).getImage();

    public SocioAgregarView() {
        initComponents();
        establecerDefault();

        Container pane = ((BasicInternalFrameUI) this.getUI()).getNorthPane();
        pane.remove(0);

        sar = this;

    }

    private static final Color CELESTITO = new Color(143, 147, 149);
    private static final Color VERDECITO = new Color(183, 187, 189);
    private static final Color AZULCITO = new Color(80, 87, 89);
    //Estas son los dos Íconos que aparecen en las TARJETAS para MODIFICAR y ELIMINAR

    //Esto es un Override de paintComponent del JPanel SocioTarjeta para darle color
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;

        //Esto es un arreglo de COLORES ya establecidos anteriormente
        Color[] colors = {CELESTITO, VERDECITO, AZULCITO};
        //Esto es un arreglo de fracciones que indica cómo se distribuyen los colores
        float[] fractions = {0f, 0.2f, 1f};
        //Se crea el DEGRADADO LINEAL dándole indicaciones de en dónde comienza horizontal y verticalmente, cuánto ocuparán los colores con las fracciones, y el tipo de rellenado
        LinearGradientPaint gp = new LinearGradientPaint(0, 0, getHeight(), 0, fractions, colors, MultipleGradientPaint.CycleMethod.NO_CYCLE);
        //Se aplica el degradado al panel
        g2d.setPaint(gp);
        //Se rellena el panel con el degradado
        g2d.fillRect(0, 0, getWidth(), getHeight());

    }

    public JLabel getLabelInformativo() {
        return this.labelInformativo;
    }
    List<JLabel> lista = Arrays.asList(this.jLReset, this.jLCancelar, this.jLAgregar);

    public List<JLabel> getIconos() {
        return lista;
    }

    public JLabel getIcon() {
        return this.jLAgregar;
    }

    public static SocioAgregarView getInstance() {
        //Si el atributo sbr es nulo, lo creamos con el constructor
        if (sar == null) {
            sar = new SocioAgregarView();
        }
        //Se devuelve el atributo sbr
        return sar;
    }

    public JTextField getJTFDNI() {
        return this.jTFDNI;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPSocioAgregar = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLApellido = new javax.swing.JLabel();
        jLNombre = new javax.swing.JLabel();
        jLDomicilio = new javax.swing.JLabel();
        jLDni = new javax.swing.JLabel();
        jLImagen = new javax.swing.JLabel();
        jLNumSocio = new javax.swing.JLabel();
        jLEst = new javax.swing.JLabel();
        jLNumeroDeSocio = new javax.swing.JLabel();
        jLEstado = new javax.swing.JLabel();
        jTFApellido = new javax.swing.JTextField();
        jTFNombre = new javax.swing.JTextField();
        jTFDomicilio = new javax.swing.JTextField();
        jTFDNI = new javax.swing.JTextField();
        jLAgregar = new javax.swing.JLabel();
        jLReset = new javax.swing.JLabel();
        jLCancelar = new javax.swing.JLabel();
        jLFechaDeAlta = new javax.swing.JLabel();
        jLFechaDeBaja = new javax.swing.JLabel();
        jLAgregarSocios = new javax.swing.JLabel();
        jLTelefono = new javax.swing.JLabel();
        jTFTelefono = new javax.swing.JTextField();
        jLMail = new javax.swing.JLabel();
        jTFMail = new javax.swing.JTextField();
        jLFechaDeAltaDEFAULT = new javax.swing.JLabel();
        jLFechaDeBajaDEFAULT = new javax.swing.JLabel();
        labelInformativo = new javax.swing.JLabel();

        jLApellido.setText("Apellido:");

        jLNombre.setText("Nombre:");

        jLDomicilio.setText("Domicilio:");

        jLDni.setText("DNI:");

        jLImagen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLImagenMouseClicked(evt);
            }
        });

        jLNumSocio.setText("Socio número:");

        jLEst.setText("Estado:");

        jLNumeroDeSocio.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLEstado.setForeground(java.awt.Color.green);
        jLEstado.setText("Socio Activo");

        jTFApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFApellidoActionPerformed(evt);
            }
        });
        jTFApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFApellidoKeyReleased(evt);
            }
        });

        jTFNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFNombreActionPerformed(evt);
            }
        });
        jTFNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFNombreKeyReleased(evt);
            }
        });

        jTFDomicilio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFDomicilioActionPerformed(evt);
            }
        });
        jTFDomicilio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFDomicilioKeyReleased(evt);
            }
        });

        jTFDNI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFDNIActionPerformed(evt);
            }
        });
        jTFDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFDNIKeyReleased(evt);
            }
        });

        jLAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vistas/imagenes/agregarSocio2.png"))); // NOI18N
        jLAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLAgregarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLAgregarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLAgregarMouseExited(evt);
            }
        });

        jLReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vistas/imagenes/resetear.png"))); // NOI18N
        jLReset.setText("Reset");
        jLReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLResetMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLResetMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLResetMouseExited(evt);
            }
        });

        jLCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vistas/imagenes/cancelar.png"))); // NOI18N
        jLCancelar.setText("Cancelar");
        jLCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLCancelarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLCancelarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLCancelarMouseExited(evt);
            }
        });

        jLFechaDeAlta.setText("Fecha de Alta:");

        jLFechaDeBaja.setText("Fecha de Baja:");

        jLAgregarSocios.setFont(new java.awt.Font("Segoe UI Historic", 1, 18)); // NOI18N
        jLAgregarSocios.setForeground(new java.awt.Color(0, 160, 210));
        jLAgregarSocios.setText("Agregar socios");

        jLTelefono.setText("Teléfono:");

        jTFTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFTelefonoActionPerformed(evt);
            }
        });
        jTFTelefono.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFTelefonoKeyReleased(evt);
            }
        });

        jLMail.setText("E-Mail:");

        jTFMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFMailActionPerformed(evt);
            }
        });
        jTFMail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFMailKeyReleased(evt);
            }
        });

        jLFechaDeAltaDEFAULT.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        jLFechaDeBajaDEFAULT.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLNumSocio))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLEst)
                                .addGap(18, 18, 18)
                                .addComponent(jLEstado))
                            .addComponent(jLImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLNombre)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLNumeroDeSocio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLApellido, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(55, 55, 55)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTFNombre)
                                    .addComponent(jTFApellido)
                                    .addComponent(labelInformativo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLDni)
                                    .addComponent(jLDomicilio)
                                    .addComponent(jLTelefono)
                                    .addComponent(jLMail))
                                .addGap(49, 49, 49)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFDomicilio, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                                    .addComponent(jTFMail, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTFTelefono)
                                    .addComponent(jLFechaDeBajaDEFAULT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLFechaDeAltaDEFAULT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTFDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(52, 52, 52))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLFechaDeAlta)
                            .addComponent(jLFechaDeBaja))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLAgregarSocios, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(242, 242, 242)
                .addComponent(jLReset, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 164, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLNumSocio)
                            .addComponent(jLNumeroDeSocio)
                            .addComponent(labelInformativo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLEst)
                            .addComponent(jLEstado))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLApellido)
                            .addComponent(jTFApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLNombre)
                            .addComponent(jTFNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLDomicilio)
                            .addComponent(jTFDomicilio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTFDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLDni))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLTelefono)
                            .addComponent(jTFTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTFMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLMail))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLFechaDeAlta)
                            .addComponent(jLFechaDeAltaDEFAULT))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLFechaDeBaja)
                            .addComponent(jLFechaDeBajaDEFAULT))))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLAgregarSocios, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLReset, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(53, 53, 53))
        );

        javax.swing.GroupLayout jPSocioAgregarLayout = new javax.swing.GroupLayout(jPSocioAgregar);
        jPSocioAgregar.setLayout(jPSocioAgregarLayout);
        jPSocioAgregarLayout.setHorizontalGroup(
            jPSocioAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPSocioAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPSocioAgregarLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPSocioAgregarLayout.setVerticalGroup(
            jPSocioAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPSocioAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPSocioAgregarLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPSocioAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 743, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPSocioAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTFDNIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFDNIActionPerformed
        // TODO add your handling code here:
        String caracteresIngresados = this.jTFDNI.getText();
        caracteresIngresados = caracteresIngresados.replaceAll("\\.", "");
        JTextField valoresModificados = this.jTFDNI;
        JLabel valorMod = new JLabel();
        String valorDelCampo = caracteresIngresados;
        String campo = this.jTFDNI.getText();

        SocioTarjeta.getInstance().cotejarDNI(caracteresIngresados, labelInformativo, valorMod, valoresModificados,
                valorDelCampo, campo);
    }//GEN-LAST:event_jTFDNIActionPerformed

    private void jTFDomicilioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFDomicilioActionPerformed
        // TODO add your handling code here:
        String caracteresIngresados = darFormatoPalabras(this.jTFDomicilio.getText().toLowerCase(), this.jLDomicilio.getText());
        this.jTFDomicilio.setText(caracteresIngresados);

        JTextField valoresModificados = this.jTFDomicilio;
        JLabel valorMod = new JLabel();
        String valorDelCampo = caracteresIngresados;
        String campo = this.jTFDomicilio.getText();

        if (!(this.jTFDomicilio.getText().length() == 0)) {
            SocioTarjeta.getInstance().cotejarDomicilio(caracteresIngresados, labelInformativo, valorMod, valoresModificados,
                    valorDelCampo, campo);
        } else {
            labelInformativo.setText("El Domicilio no puede estar vacío");
            labelInformativo.setForeground(Color.RED);
            SocioTarjeta.getInstance().temporizar(labelInformativo, "");
        }
    }//GEN-LAST:event_jTFDomicilioActionPerformed

    private void jTFTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFTelefonoActionPerformed
        // TODO add your handling code here:
        String caracteresIngresados = this.jTFTelefono.getText();
        JTextField valoresModificados = this.jTFTelefono;
        JLabel valorMod = new JLabel();
        String valorDelCampo = caracteresIngresados;
        String campo = this.jTFTelefono.getText();

        SocioTarjeta.getInstance().cotejarTelefono(caracteresIngresados, labelInformativo, valorMod, valoresModificados,
                valorDelCampo, campo);
    }//GEN-LAST:event_jTFTelefonoActionPerformed

    private void jLImagenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLImagenMouseClicked
        // TODO add your handling code here:
        SocioData metodoDeSocio = new SocioData();
        int idSocio = metodoDeSocio.obtenerUltimoSocio() + 1;
        this.foto = SocioTarjeta.getInstance().editarCamposSocio("Imagen", this.jLNumeroDeSocio, this.jLImagen);
    }//GEN-LAST:event_jLImagenMouseClicked

    private void establecerDefault() {
        Principal.getInstance().habilitarModificaciones(false, false, false);

        int idSocio = metodoDeSocio.obtenerUltimoSocio() + 1;
        this.jLNumeroDeSocio.setText(String.valueOf(idSocio));

        DateTimeFormatter formatoDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        DateTimeFormatter formatoDEFAULT = DateTimeFormatter.ofPattern("dd-MM-yyyy");

        LocalDate fechaDeAlta = LocalDate.now();
        LocalDate fechaDeBaja = LocalDate.now().plusYears(5);

        String fechaDeAltaDEFAULT = formatoDEFAULT.format(fechaDeAlta);
        String fechaDeBajaDEFAULT = formatoDEFAULT.format(fechaDeBaja);
        this.jLFechaDeAltaDEFAULT.setText(fechaDeAltaDEFAULT.replaceAll("-", " \\| "));
        this.jLFechaDeBajaDEFAULT.setText(fechaDeBajaDEFAULT.replaceAll("-", " \\| "));

        cargarFotoPerfilVacio(this.jLImagen);

    }

    private void cargarFotoPerfilVacio(JLabel fotoPerfilAgregar) {
        Image img = new ImageIcon("./src/vistas/imagenes/agregar.png").getImage(); // carga la imagen desde la ruta
        Image img2 = img.getScaledInstance(100, 100, Image.SCALE_SMOOTH); // crea una nueva imagen con el tamaño y el tipo de escalado deseados
        fotoPerfilAgregar.setIcon(new ImageIcon(img2));
    }

    //Todavía no implementado
    private void temporizarAgregarSocio(JLabel campo, JTextField valor) {

        Timer temporizador = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

            }
        });
    }
    private boolean camposCorrectos = false;
    private boolean campoFoto = true;
    private Socio socio;
    private void jLAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLAgregarMouseClicked
        camposRellenos = 0;
        try {

            int idSocio = metodoDeSocio.obtenerUltimoSocio() + 1; //Ese 5556 hacer método para obtener el valor más bajo de id
            String apellido = controlarConfirmados(this.jTFApellido);
            String nombre = controlarConfirmados(this.jTFNombre);
            String domicilio = controlarConfirmados(this.jTFDomicilio);

            this.jTFDNI.setText(this.jTFDNI.getText().replaceAll("\\.", ""));
            this.jTFDNI.setName("jTFDNI");

            int dni = Integer.parseInt(controlarConfirmados(this.jTFDNI));

            String telefono = controlarConfirmados(this.jTFTelefono);

            String mail = controlarConfirmados(this.jTFMail);

            DateTimeFormatter formatoDate = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            DateTimeFormatter formatoDEFAULT = DateTimeFormatter.ofPattern("dd-MM-yyyy");

            LocalDate fechaDeAlta = LocalDate.now();
            LocalDate fechaDeBaja = LocalDate.now().plusYears(5);

            String fechaDeAltaDEFAULT = formatoDEFAULT.format(fechaDeAlta);
            String fechaDeBajaDEFAULT = formatoDEFAULT.format(fechaDeBaja);

            try {
                File file = this.foto.getFile();
                FileInputStream fis = this.foto.getFis();
                try {
                    SocioTarjeta.getInstance().saveImage(file, fis, this.foto);
                    campoFoto = true;
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Adiviná qué... Algo pasó con la imagen");
                    System.out.println(ex.getMessage());
                }
            } catch (Exception ex) {
                campoFoto = false;
                SocioTarjeta.getInstance().retrasarTemporizador(0, this.jLImagen, "");
            }

            String ruta = "./src/vistas/imagenes/foto_" + String.valueOf(idSocio);
            String fotoPerfilNombre = ruta;

            boolean estado = jLEstado.getText().equals("Socio Activo");

            socio = new Socio(idSocio, apellido, nombre, domicilio, dni, telefono, mail, fechaDeAlta, fechaDeBaja, fotoPerfilNombre, estado);

            Class<?> clase = socio.getClass();

            Field[] atributos = clase.getDeclaredFields();

            try {
                for (Field atributo : atributos) {
                    atributo.setAccessible(true);

                    Object valor = atributo.get(socio);

                    controlarCampos(this.labelInformativo, atributo.getName(), valor);
                }
            } catch (IllegalAccessException e) {
                JOptionPane.showMessageDialog(this, "Se pudrió todo iterando en el objeto socio para ver si están todos los campos llenos");
            }
            if (camposCorrectos) {

            }

        } catch (NumberFormatException ex) {

        }


    }//GEN-LAST:event_jLAgregarMouseClicked

    private String controlarConfirmados(JTextField textField) {
        Color colorConfirmacion = Color.CYAN;

        if (colorConfirmacion.equals(textField.getForeground())) {
            return textField.getText();
        } else {
            if ("jTFDNI".equals(textField.getName()) && textField.getName() != null) {
                return "1";
            } else {
                return "";
            }
        }
    }
    //VER POR QUÉ NO REACCIONAN AL TEMPORIZADOR LOS LABELS
    private int camposRellenos = 0;
    private final int TOTALMENTE_RELLENADOS = 11;

    private void controlarCampos(JLabel labelInformativo, String campo, Object valor) {

        if (valor instanceof Integer) {
            if (((Integer) valor).intValue() <= 1) {
                if (campo.equals("dni")) {
                    SocioTarjeta.getInstance().retrasarTemporizador(2400, this.jLDni, "");
                }

            } else {
                camposRellenos++;
            }
        } else if (valor instanceof String) {
            if (valor.equals("")) {
                switch (campo) {
                    case "apellido":
                        SocioTarjeta.getInstance().retrasarTemporizador(600, this.jLApellido, "");
                        break;
                    case "nombre":
                        SocioTarjeta.getInstance().retrasarTemporizador(1200, this.jLNombre, "");
                        break;
                    case "domicilio":
                        SocioTarjeta.getInstance().retrasarTemporizador(1800, this.jLDomicilio, "");
                        break;
                    case "telefono":
                        SocioTarjeta.getInstance().retrasarTemporizador(3000, this.jLTelefono, "");
                        break;
                    case "mail":
                        SocioTarjeta.getInstance().retrasarTemporizador(3600, this.jLMail, "");
                        break;
                    default:
                        break;
                }
            } else {
                camposRellenos++;

            }
        } else {
            camposRellenos++;
        }

        if (camposRellenos == TOTALMENTE_RELLENADOS && campoFoto) {
            confirmarSocio();

        } else {

            this.labelInformativo.setText("Confirme todos los campos que titilan");
            this.labelInformativo.setForeground(Color.RED);
            SocioTarjeta.getInstance().temporizar(this.labelInformativo, "");

        }
    }

    private void confirmarSocio() {

            if (camposRellenos == TOTALMENTE_RELLENADOS && campoFoto) {
                SocioTarjeta.getInstance().temporizar(this.labelInformativo, "");
                this.labelInformativo.setText("Socio Listo para confirmar");

                int respuesta = JOptionPane.showConfirmDialog(this, "Confirmar al Socio y Salir al Menú Principal?", "Socio Nº " + this.jLNumeroDeSocio.getText() + " Listo para agregar!", JOptionPane.INFORMATION_MESSAGE, JOptionPane.INFORMATION_MESSAGE, this.jLAgregar.getIcon());
                if (respuesta == 0) {
                    metodoDeSocio.agregarSocio(socio, this.foto);
                    Principal.getInstance().habilitarModificaciones(false, false, true);
                    this.dispose();
                } else if (respuesta == 1) {
                    this.labelInformativo.setText("Socio agregado con éxito!");
                    SocioTarjeta.getInstance().retrasarTemporizador(2500, this.labelInformativo, "");
                    metodoDeSocio.agregarSocio(socio, this.foto);

                    this.jLNumeroDeSocio.setText(String.valueOf(metodoDeSocio.obtenerUltimoSocio()+1));
                    this.revalidate();
                    this.repaint();
                    resetearCampos();
                } else {
                    this.labelInformativo.setText("Este Socio está listo para confirmar");
                    SocioTarjeta.getInstance().temporizar(this.labelInformativo, "");
                }
            } else {

                this.labelInformativo.setText("Confirme todos los campos que titilan");
                this.labelInformativo.setForeground(Color.RED);
                SocioTarjeta.getInstance().temporizar(this.labelInformativo, "");
            }

        }

    

    private List devolverListadoTF() {
        List<JTextField> lista = Arrays.asList(this.jTFApellido, this.jTFNombre, this.jTFDNI, this.jTFDomicilio,
                this.jTFMail, this.jTFTelefono);

        return lista;
    }

    public void resetearCampos() {

        List<JTextField> listaTextFields = new ArrayList<>();
        List lista = devolverListadoTF();
        listaTextFields.addAll(lista);

        chequearCampos(listaTextFields);
    }

    private void chequearCampos(List<JTextField> listaTextFields) {
        int checkCampo = 0;
        for (JTextField textField : listaTextFields) {
            if (textField.getText().equals("")) {
                checkCampo++;
            } else {
                textField.setText("");
                textField.setForeground(Color.BLACK);
            }
        }
        final int CANTIDAD_CAMPOS_VACIOS = 6;
        if (this.foto == null && checkCampo == CANTIDAD_CAMPOS_VACIOS) {
            labelInformativo.setText("No hay campos para resetear");
        } else {
            labelInformativo.setText("Se resetearon todos los campos");
        }
        cargarFotoPerfilVacio(this.jLImagen);
        SocioTarjeta.getInstance().temporizar(labelInformativo, "");
    }

    /*public void resetearCampos() {
        int campoChecker = 0;
        ArrayList <JTextField> listaTextFields = new ArrayList<>();
        List lista = devolverListadoTF();
        listaTextFields.addAll(lista);
        
        for(JTextField textField : listaTextFields){
            if(textField.getText().equals("")){
                campoChecker++;
            }
            textField.setText("");
            textField.setForeground(Color.BLACK);
        }
        
        final int CANTIDAD_CAMPOS_VACIOS = 6;
        String campoFotoPerfil;
         try{
            campoFotoPerfil = this.foto.getFotoPerfilNombre();
        }catch(NullPointerException ex){
            campoFotoPerfil = "";
        }
        if(campoChecker == CANTIDAD_CAMPOS_VACIOS && campoFotoPerfil.equals("")){
            this.labelInformativo.setText("Los campos están vacíos");
        }else{
            this.labelInformativo.setText("Se han reseteado todos los campos");
        }
        cargarFotoPerfilVacio(this.jLImagen);
        SocioTarjeta.getInstance().temporizar(labelInformativo);
    }*/
    public boolean impedir = true;
    private void jTFApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFApellidoActionPerformed
        // TODO add your handling code here:
        String caracteresIngresados = darFormatoPalabras(this.jTFApellido.getText().toLowerCase(), this.jLApellido.getText());
        this.jTFApellido.setText(caracteresIngresados);

        JTextField valoresModificados = this.jTFApellido;
        JLabel valorMod = new JLabel();
        String valorDelCampo = caracteresIngresados;
        String campo = this.jLApellido.getText();
        if (!(this.jTFApellido.getText().length() == 0)) {
            SocioTarjeta.getInstance().cotejarApellido(caracteresIngresados, labelInformativo, valorMod, valoresModificados,
                    valorDelCampo, campo);
        } else {
            labelInformativo.setForeground(Color.RED);
            labelInformativo.setText("El Apellido debe incluír letras");
            SocioTarjeta.getInstance().temporizar(labelInformativo, "");
        }
    }//GEN-LAST:event_jTFApellidoActionPerformed

    private void jTFNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFNombreActionPerformed
        // TODO add your handling code here:
        String caracteresIngresados = darFormatoPalabras(this.jTFNombre.getText().toLowerCase(), this.jTFNombre.getText());
        this.jTFNombre.setText(caracteresIngresados);

        JTextField valoresModificados = this.jTFNombre;
        JLabel valorMod = new JLabel();
        String valorDelCampo = caracteresIngresados;
        String campo = this.jTFNombre.getText();

        if (!(this.jTFNombre.getText().length() == 0)) {
            SocioTarjeta.getInstance().cotejarNombre(caracteresIngresados, labelInformativo, valorMod, valoresModificados,
                    valorDelCampo, campo);
        } else {
            labelInformativo.setForeground(Color.RED);
            labelInformativo.setText("El Nombre debe incluír letras");
            SocioTarjeta.getInstance().temporizar(labelInformativo, "");
        }
    }//GEN-LAST:event_jTFNombreActionPerformed

    private void jTFMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFMailActionPerformed
        // TODO add your handling code here:
        String caracteresIngresados = this.jTFMail.getText();
        JTextField valoresModificados = this.jTFMail;
        JLabel valorMod = new JLabel();
        String valorDelCampo = caracteresIngresados;
        String campo = this.jTFMail.getText();

        SocioTarjeta.getInstance().cotejarEmail(caracteresIngresados, labelInformativo, valorMod, valoresModificados,
                valorDelCampo, campo);
    }//GEN-LAST:event_jTFMailActionPerformed

    private void jTFApellidoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFApellidoKeyReleased
        // TODO add your handling code here:
        JLabel valorMod = new JLabel();
        if (evt.getKeyCode() == 8) {
            this.jTFApellido.setForeground(Color.BLACK);
            //hacer un getApellido para chequear si es null, y si no lo es forzar el null
        } else {
            if (this.jTFApellido.getForeground().equals(Color.CYAN) && evt.getKeyCode() != 10) {
                this.jTFApellido.setForeground(Color.BLACK);
            }
        }

        SocioTarjeta.getInstance().noEnterApellido(labelInformativo, valorMod, evt);
    }//GEN-LAST:event_jTFApellidoKeyReleased

    private void jTFNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFNombreKeyReleased
        // TODO add your handling code here:
        JLabel valorMod = new JLabel();
        if (evt.getKeyCode() == 8) {
            this.jTFNombre.setForeground(Color.BLACK);
            //hacer un getNombre para chequear si es null, y si no lo es forzar el null
        } else {
            if (this.jTFNombre.getForeground().equals(Color.CYAN) && evt.getKeyCode() != 10) {
                this.jTFNombre.setForeground(Color.BLACK);
            }
        }
        SocioTarjeta.getInstance().noEnterNombre(labelInformativo, valorMod, evt);
    }//GEN-LAST:event_jTFNombreKeyReleased

    private void jTFDomicilioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFDomicilioKeyReleased
        // TODO add your handling code here:
        JLabel valorMod = new JLabel();
        if (evt.getKeyCode() == 8) {
            this.jTFDomicilio.setForeground(Color.BLACK);
            //hacer un getDomicilio para chequear si es null, y si no lo es forzar el null pues quedará guardado 
        } else {
            if (this.jTFDomicilio.getForeground().equals(Color.CYAN) && evt.getKeyCode() != 10) {
                this.jTFDomicilio.setForeground(Color.BLACK);
            }
        }
        SocioTarjeta.getInstance().noEnterDomicilio(labelInformativo, valorMod, evt);
    }//GEN-LAST:event_jTFDomicilioKeyReleased

    private void jTFDNIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFDNIKeyReleased
        // TODO add your handling code here:
        JLabel valorMod = new JLabel();
        valorMod.setText("BuscarDNI");
        if (evt.getKeyCode() == 8) {
            this.jTFDNI.setForeground(Color.BLACK);
            //hacer un getDNI para chequear si es null, y si no lo es forzar el null
        } else {
            if (this.jTFDNI.getForeground().equals(Color.CYAN) && evt.getKeyCode() != 10) {
                this.jTFDNI.setForeground(Color.BLACK);
            }
        }
        SocioTarjeta.getInstance().noEnterDNI(labelInformativo, valorMod, evt);
    }//GEN-LAST:event_jTFDNIKeyReleased

    private void jTFTelefonoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFTelefonoKeyReleased
        // TODO add your handling code here:
        JLabel valorMod = new JLabel();
        if (evt.getKeyCode() == 8) {
            this.jTFTelefono.setForeground(Color.BLACK);
            //hacer un getApellido para chequear si es null, y si no lo es forzar el null
        } else {
            if (this.jTFTelefono.getForeground().equals(Color.CYAN) && evt.getKeyCode() != 10) {
                this.jTFTelefono.setForeground(Color.BLACK);
            }
        }
        SocioTarjeta.getInstance().noEnterTelefono(labelInformativo, valorMod, evt);
    }//GEN-LAST:event_jTFTelefonoKeyReleased

    private void jTFMailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFMailKeyReleased
        // TODO add your handling code here:
        JLabel valorMod = new JLabel();
        if (evt.getKeyCode() == 8) {
            this.jTFMail.setForeground(Color.BLACK);
            //hacer un getApellido para chequear si es null, y si no lo es forzar el null
        } else {
            if (this.jTFMail.getForeground().equals(Color.CYAN) && evt.getKeyCode() != 10) {
                this.jTFMail.setForeground(Color.BLACK);
            }
        }
        SocioTarjeta.getInstance().noEnterMail(labelInformativo, valorMod, evt);
    }//GEN-LAST:event_jTFMailKeyReleased

    private void jLResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLResetMouseClicked
        // TODO add your handling code here:
        int respuesta = JOptionPane.showConfirmDialog(this, "Se perderán todos los datos. Desea continuar?", "Reseteando", WIDTH, JOptionPane.PLAIN_MESSAGE, jLReset.getIcon());
        if (respuesta == 0) {
            resetearCampos();
        }
    }//GEN-LAST:event_jLResetMouseClicked

    private void jLCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLCancelarMouseClicked
        // TODO add your handling code here:
        int respuesta = JOptionPane.showConfirmDialog(this, "Se perderán todos los datos. Desea continuar?", "Cancelando", WIDTH, JOptionPane.PLAIN_MESSAGE, jLCancelar.getIcon());

        if (respuesta == 0) {

            this.dispose();
        }
        Principal.getInstance().revalidate();
        Principal.getInstance().repaint();
        Principal.getInstance().habilitarModificaciones(false, false, true);
    }//GEN-LAST:event_jLCancelarMouseClicked

    private void jLResetMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLResetMouseEntered
        // TODO add your handling code here:
        this.jLReset.setSize(this.jLReset.getWidth() + 1, this.jLReset.getHeight() + 1);
    }//GEN-LAST:event_jLResetMouseEntered

    private void jLResetMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLResetMouseExited
        // TODO add your handling code here:
        this.jLReset.setSize(this.jLReset.getWidth() - 1, this.jLReset.getWidth() - 1);
    }//GEN-LAST:event_jLResetMouseExited

    private void jLCancelarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLCancelarMouseEntered
        this.jLCancelar.setSize(this.jLCancelar.getWidth() + 1, this.jLCancelar.getHeight() + 1);
    }//GEN-LAST:event_jLCancelarMouseEntered

    private void jLCancelarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLCancelarMouseExited
        this.jLCancelar.setSize(this.jLCancelar.getWidth() - 1, this.jLCancelar.getHeight() - 1);
    }//GEN-LAST:event_jLCancelarMouseExited

    private void jLAgregarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLAgregarMouseEntered
        this.jLAgregar.setSize(this.jLAgregar.getWidth() + 3, this.jLAgregar.getHeight() + 3);
    }//GEN-LAST:event_jLAgregarMouseEntered

    private void jLAgregarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLAgregarMouseExited
        this.jLAgregar.setSize(this.jLAgregar.getWidth() - 3, this.jLAgregar.getHeight() - 3);
    }//GEN-LAST:event_jLAgregarMouseExited

    private String darFormatoPalabras(String caracteresIngresados, String valor) {
        if (valor.equals("Domicilio:")) {
            Pattern patron = Pattern.compile("\\b(de|la|y|en|ante|bajo|con|contra|de|desde|entre|hacia|hasta|"
                    + "para|por|sin|sobre|los|lo|las|o|al|el)\\b|\\b\\p{Ll}+");
            Matcher match = patron.matcher(caracteresIngresados);
            StringBuffer resultado = new StringBuffer();

            while (match.find()) {
                if (match.group(1) != null) {
                    match.appendReplacement(resultado, match.group(0).toLowerCase());
                } else {
                    match.appendReplacement(resultado, match.group().substring(0, 1).toUpperCase()
                            + match.group().substring(1).toLowerCase());
                }
            }
            match.appendTail(resultado);

            return resultado.toString();
        } else {
            String[] ingresos = caracteresIngresados.split(" ");
            StringBuilder resultado = new StringBuilder();

            for (String ingreso : ingresos) {
                if (!ingreso.isEmpty()) {
                    resultado.append(Character.toUpperCase(ingreso.charAt(0)));
                    resultado.append(ingreso.substring(1));
                    resultado.append(" ");
                }
            }
            return resultado.toString().trim();
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLAgregar;
    private javax.swing.JLabel jLAgregarSocios;
    private javax.swing.JLabel jLApellido;
    private javax.swing.JLabel jLCancelar;
    private javax.swing.JLabel jLDni;
    private javax.swing.JLabel jLDomicilio;
    private javax.swing.JLabel jLEst;
    private javax.swing.JLabel jLEstado;
    private javax.swing.JLabel jLFechaDeAlta;
    private javax.swing.JLabel jLFechaDeAltaDEFAULT;
    private javax.swing.JLabel jLFechaDeBaja;
    private javax.swing.JLabel jLFechaDeBajaDEFAULT;
    private javax.swing.JLabel jLImagen;
    private javax.swing.JLabel jLMail;
    private javax.swing.JLabel jLNombre;
    private javax.swing.JLabel jLNumSocio;
    private javax.swing.JLabel jLNumeroDeSocio;
    private javax.swing.JLabel jLReset;
    private javax.swing.JLabel jLTelefono;
    private javax.swing.JPanel jPSocioAgregar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTFApellido;
    private javax.swing.JTextField jTFDNI;
    private javax.swing.JTextField jTFDomicilio;
    private javax.swing.JTextField jTFMail;
    private javax.swing.JTextField jTFNombre;
    private javax.swing.JTextField jTFTelefono;
    private javax.swing.JLabel labelInformativo;
    // End of variables declaration//GEN-END:variables
}
